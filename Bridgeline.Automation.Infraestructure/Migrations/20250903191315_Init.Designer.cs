// <auto-generated />
using System;
using System.Collections.Generic;
using Bridgeline.Automation.Infraestructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Bridgeline.Automation.Infraestructure.Migrations
{
    [DbContext(typeof(AutomationContext))]
    [Migration("20250903191315_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "hstore");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Bridgeline.Automation.Domain.entities.AutomationExecutionLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CompanyIntegrationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DurationInSeconds")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ExecutionId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ExecutionLogs");
                });

            modelBuilder.Entity("Bridgeline.Automation.Domain.entities.CompanyAutomation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Dictionary<string, string>>("Conditions")
                        .HasColumnType("hstore");

                    b.Property<Dictionary<string, string>>("Configuration")
                        .HasColumnType("hstore");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("N8nWorkflowId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("RunFrequency")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Dictionary<string, string>>("Tiggers")
                        .HasColumnType("hstore");

                    b.Property<Guid?>("TypeAutomationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("TypeAutomationId");

                    b.ToTable("CompanyAutomations");
                });

            modelBuilder.Entity("Bridgeline.Automation.Domain.entities.CompanyIntegration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AutomationExecutionLogId")
                        .HasColumnType("uuid");

                    b.Property<Dictionary<string, string>>("Configuration")
                        .HasColumnType("hstore");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Credentials")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastSyncAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProviderServiceId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("StatusId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AutomationExecutionLogId");

                    b.HasIndex("ProviderServiceId");

                    b.HasIndex("StatusId");

                    b.ToTable("CompanyIntegrations");
                });

            modelBuilder.Entity("Bridgeline.Automation.Domain.entities.Provider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("Bridgeline.Automation.Domain.entities.ProviderService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProviderId")
                        .HasColumnType("uuid");

                    b.Property<bool>("RequiredCredentials")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("ProviderServices");
                });

            modelBuilder.Entity("Bridgeline.Automation.Domain.entities.Status", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("Bridgeline.Automation.Domain.entities.TypeAutomation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Dictionary<string, string>>("DefaultConfig")
                        .HasColumnType("hstore");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("N8nTemplateId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("TypeAutomations");
                });

            modelBuilder.Entity("Bridgeline.Automation.Domain.entities.CompanyAutomation", b =>
                {
                    b.HasOne("Bridgeline.Automation.Domain.entities.TypeAutomation", "TypeAutomation")
                        .WithMany()
                        .HasForeignKey("TypeAutomationId");

                    b.Navigation("TypeAutomation");
                });

            modelBuilder.Entity("Bridgeline.Automation.Domain.entities.CompanyIntegration", b =>
                {
                    b.HasOne("Bridgeline.Automation.Domain.entities.AutomationExecutionLog", null)
                        .WithMany("CompanyIntegration")
                        .HasForeignKey("AutomationExecutionLogId");

                    b.HasOne("Bridgeline.Automation.Domain.entities.ProviderService", "ProviderService")
                        .WithMany()
                        .HasForeignKey("ProviderServiceId");

                    b.HasOne("Bridgeline.Automation.Domain.entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.Navigation("ProviderService");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Bridgeline.Automation.Domain.entities.ProviderService", b =>
                {
                    b.HasOne("Bridgeline.Automation.Domain.entities.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Bridgeline.Automation.Domain.entities.AutomationExecutionLog", b =>
                {
                    b.Navigation("CompanyIntegration");
                });
#pragma warning restore 612, 618
        }
    }
}
